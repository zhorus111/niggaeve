<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fireworks Celebration</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Bubblegum+Sans&display=swap');

    body {
      margin: 0;
      overflow: hidden;
      background: linear-gradient(45deg, #ff9a9e, #fad0c4, #fbc2eb, #a1c4fd, #c2e9fb);
      background-size: 300% 300%;
      animation: backgroundAnimation 10s ease infinite;
      color: white;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      font-family: 'Bubblegum Sans', cursive;
      text-align: center;
      position: relative;
    }

    @keyframes backgroundAnimation {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    h1, h2, #timer {
      position: relative;
      z-index: 10;
      margin: 15px 0;
    }

    #text1 {
      font-size: 2rem; /* Puțin mai mic pentru $NEVE */
      font-weight: bold;
      color: white;
    }

    #text2 {
      font-size: 2.8rem; /* NIGGAEVE */
      font-weight: bold;
      color: white;
    }

    #timer {
      font-size: 1.6rem; /* Puțin mai mic */
      color: white;
      margin-top: 10px;
    }

    #timer::before {
      content: "CA: ";
      font-weight: bold;
      font-size: 1.8rem; /* CA: puțin mai mare */
      color: white;
    }

    #social-links {
      display: flex;
      justify-content: center;
      gap: 40px;
      margin-top: 20px;
    }

    #social-links a {
      font-size: 2rem;
      color: white;
      text-decoration: none;
      font-weight: bold;
      transition: color 0.3s ease, transform 0.3s ease;
    }

    #social-links a:hover {
      color: #9b59b6; /* Mov */
      transform: scale(1.1);
    }

    #image-container img {
      width: 300px;
      max-width: 90%;
    }

    canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
    }
  </style>
</head>
<body>
  <canvas id="fireworksCanvas"></canvas>

  <div>
    <h1 id="text1">$NEVE</h1>
    <h2 id="text2">NIGGAEVE</h2>
    <div id="image-container">
      <img src="logo real fara bg.png" alt="Logo">
    </div>
    <div id="timer">00d : 00h : 00m : 00s</div>

    <!-- Social Media Text Links -->
    <div id="social-links">
      <a href="https://t.me/NiggaEveSol" target="_blank" rel="noopener noreferrer">TELEGRAM</a>
      <a href="https://x.com/NiggaEvee" target="_blank" rel="noopener noreferrer">X</a>
    </div>
  </div>

  <script>
    const canvas = document.getElementById('fireworksCanvas');
    const ctx = canvas.getContext('2d');
    const timerElement = document.getElementById('timer');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const fireworks = [];
    const particles = [];

    class Firework {
      constructor(x, y, targetX, targetY) {
        this.x = x;
        this.y = y;
        this.targetX = targetX;
        this.targetY = targetY;
        this.speed = 3;
        this.color = `hsl(${Math.random() * 360}, 100%, 50%)`;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
      }

      update() {
        const dx = this.targetX - this.x;
        const dy = this.targetY - this.y;
        const distance = Math.sqrt(dx * dx + dy * dy);

        this.x += (dx / distance) * this.speed;
        this.y += (dy / distance) * this.speed;

        if (distance < 5) {
          this.explode();
          fireworks.splice(fireworks.indexOf(this), 1);
        }
      }

      explode() {
        for (let i = 0; i < 100; i++) {
          particles.push(new Particle(this.targetX, this.targetY, this.color));
        }
      }
    }

    class Particle {
      constructor(x, y, color) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.speed = Math.random() * 4 + 1;
        this.angle = Math.random() * Math.PI * 2;
        this.friction = 0.98;
        this.gravity = 0.05;
        this.lifespan = 100;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
      }

      update() {
        this.x += Math.cos(this.angle) * this.speed;
        this.y += Math.sin(this.angle) * this.speed + this.gravity;
        this.speed *= this.friction;
        this.lifespan--;

        if (this.lifespan <= 0) {
          particles.splice(particles.indexOf(this), 1);
        }
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      fireworks.forEach(firework => {
        firework.update();
        firework.draw();
      });

      particles.forEach(particle => {
        particle.update();
        particle.draw();
      });

      requestAnimationFrame(animate);
    }

    function launchFirework() {
      const x = Math.random() * canvas.width;
      const y = canvas.height;
      const targetX = Math.random() * canvas.width;
      const targetY = Math.random() * canvas.height / 2;

      fireworks.push(new Firework(x, y, targetX, targetY));
    }

    setInterval(launchFirework, 500);
    animate();

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    function startCountdown() {
      const targetDate = new Date("2025-01-04T18:00:00Z").getTime();

      setInterval(() => {
        const now = new Date().getTime();
        const distance = targetDate - now;

        if (distance > 0) {
          const days = Math.floor(distance / (1000 * 60 * 60 * 24));
          const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
          const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
          const seconds = Math.floor((distance % (1000 * 60)) / 1000);

          timerElement.innerHTML = `${days}d : ${hours}h : ${minutes}m : ${seconds}s`;
        } else {
          timerElement.innerHTML = "The event has started!";
        }
      }, 1000);
    }

    startCountdown();
  </script>
</body>
</html>
